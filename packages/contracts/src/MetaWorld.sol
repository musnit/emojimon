// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

address payable constant WORLD_1_ADDRESS = payable(0x5FbDB2315678afecb367f032d93F642f64180aa3);
import { console } from "forge-std/console.sol";

contract MetaWorld  {

  function f3Spawn() external payable returns (bytes memory) {
    console.log("Inside 1111");

    bytes memory spawnCall = abi.encodeWithSelector(
      bytes4(keccak256("spawn(uint32,uint32)")),
      1,
      1
    );

    console.log("spawnCall:");
    console.logBytes(spawnCall);

// "0xa3a8e72d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003"
// "0xa3a8e72d00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001"
// "0xa3a8e72d0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000044a3a8e72d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000dde063ebe8e85d666ad99f731b4dbf8c98f29708f39fd6e51aad88f6f4ce6ab8827279cfffb92266
    (bool success, bytes memory data) = WORLD_1_ADDRESS.call{ value: msg.value }(
      abi.encodeWithSignature("spoofCall(bytes,address)",
      spawnCall,
      msg.sender
    ));

    console.log("final success: ");
    console.log(success);

    require(success, "failed");

    return "success";
  }

}
